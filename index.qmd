---
title: "Introdu√ß√£o √† an√°lise de dados em ambiente R"

date: "17 Sep 2025"

format:
  live-html:
    toc: true

resources:
  - penguins.csv

engine: knitr

webr:
  packages:
    - dplyr
    - palmerpenguins
    - ggplot2
  repos:
    - https://r-lib.r-universe.dev
---

{{< include ./_extensions/r-wasm/live/_knitr.qmd >}}

::: {.callout-note}
## Informes

√öltima atualiza√ß√£o: `r lubridate::today()`.  

C√≥digo fonte: <https://github.com/ricoperdiz/2025_analiseDadosR_SemanaBioCBIO>.  

### Adi√ß√µes

+ Inser√ß√£o do `ggplot2` na @sec-pacotes.  

+ Inser√ß√£o de uma se√ß√£o curta sobre a fun√ß√£o de ajuda do R (== `?`).  

:::

## Apresenta√ß√£o

<!-- Apresenta√ß√£o & por que R? ‚Üí 15 min -->

Bem-vindos ao mundo do **R**! 

O **R** √© uma linguagem de programa√ß√£o desenhada para a an√°lise de dados.  

Neste minicurso, apresentaremos resumidamente comandos b√°sicos em R que cobrem quase todo o ciclo da an√°lise de dados (@fig-analisedados).
Nosso intuito √© demonstrar o poder do R enquanto ferramenta para a an√°lise de dados.
Oferecemos ent√£o uma introdu√ß√£o √† importa√ß√£o de dados, checagem e transforma√ß√£o de dados, manipula√ßao


```{r}
#| label: fig-analisedados
#| fig-cap: "Ciclo da an√°lise de dados. Neste  curso, n√£o abordaremos a modelagem de dados. Fonte: Curso-R, dispon√≠vel em <https://livro.curso-r.com/assets/img/manipulacao/ciclo-ciencia-de-dados.png>."
#| echo: false
knitr::include_graphics(
  "https://livro.curso-r.com/assets/img/manipulacao/ciclo-ciencia-de-dados.png"
)
```

## Por que **R**?

{{< revealjs "por-que-r.html" >}}

------------------------------------------------------------------------

## üî∞ B√°sico em R

<!-- B√°sico em R (objetos, vetores, data.frames) ‚Üí 30 min -->

Vamos come√ßar com alguns comandos b√°sicos.
Para atribuir dados a uma vari√°vel, isto √©, criar vari√°veis, podemos utilizar os operadores `<-` ou `=`.
Vejam abaixo:

```{webr}
# Criando uma vari√°vel
x <- 10
y <- 5
meunome <- "Meu nome √© Juca Baleiro."
sinaldeigualtambematribui = "Podemos utilizar o sinal de =, por√©m tradicionalmente se utiliza o operador '<-' para criar vari√°veis."
```
Podemos fazer opera√ß√µes matem√°ticas e guardar resultado das opera√ß√µes em objetos.  

```{webr}
# Opera√ß√µes b√°sicas
soma <- x + y
soma
```

```{webr}
subtracao <- x - y
subtracao
```


```{webr}
multiplicacao <- x * y
multiplicacao
```

```{webr}
divisao <- x/y
divisao
```

### Ver o conte√∫do de um objeto

Para ver o conte√∫do de um objeto, basta digitar seu nome e rodar o c√≥digo.
Por exemplo, para ver a soma, que est√° no objeto `soma`, fazemos assim:

```{webr}
soma
```

### Concatenando elementos com a fun√ß√£o `c()`

Podemos concatenar elementos utilizando a fun√ß√£o `c()`.
Chamamos esse conjunto de elementos de vetores:

```{webr}
# Vetores: cole√ß√µes de elementos do mesmo tipo
numeros <- c(1, 2, 3, 4, 5)
numeros
letras <- c("a", "b", "c")
letras
```

Acima, criamos os vetores `numeros` e `letras`.
Reparem que em letras adicionamos letras do alfabeto entre aspas `""`.
*Devemos fazer isso toda vez que desejarmos __guardar texto__ em um objeto*.  

### Criar tabelas com a fun√ß√£o `data.frame()`

Podemos criar tabelas, que no R chamamos de `data.frame`.
Cada coluna precisa ser um vetor (criado com a fun√ß√£o `c()`). A fun√ß√£o `data.frame()` junta esses vetores, criando uma tabela.  

Em nosso exemplo exposto abaixo, os argumentos `ID`, `Nome` e `Idade` representam os nomes das colunas de nossa tabela, guardada no objeto `dados_exemplo`:

```{webr}
# `dataframe`s: tabelas com linhas e colunas
dados_exemplo <- 
  data.frame(
  ID = c(1, 2, 3),
  Nome = c("Jo√£o", "Maria", "Pedro"),
  Idade = c(25, 30, 22)
)

# Visualizando o `dataframe`
dados_exemplo
```

Podemos ver o conte√∫do de `dados_exemplo` tamb√©m simplesmente executando o nome do objeto:

```{webr}
dados_exemplo
```

## Pacotes de R {#sec-pacotes}

Pacotes em R s√£o conjuntos de fun√ß√µes ou conjuntos de dados.
Utilizamos a fun√ß√£o `install.packages()` para instalar esses pacotes.
Neste curso, faremos uso dos pacotes `dplyr` [@dplyr], `palmerpenguins` [@Horstetal2020], e `ggplot2` [@Wickham2016].
Primeiro, devemos instalar os pacotes.
Em seguida, carregamos os pacotes de interesse para nossos objetivos.  

::: {.callout-important}
### `install.packages()` VS. `library()`

Instalamos pacotes R **uma vez apenas**, para cada vers√£o de R que tivermos instalado no computador.
Por outro lado, a cada sess√£o nova de R, devemos carregar os pacotes utilizando a fun√ß√£o `library()`, de forma que as fun√ß√µes dos pacotes estejam dispon√≠veis na sess√£o.  

A fun√ß√£o `install.packages()` √© como instalar um aplicativo no seu celular: voc√™ faz uma vez. O library() √© como abrir esse aplicativo para us√°-lo: voc√™ precisa fazer isso em cada nova sess√£o que iniciar.
:::

O pacote `dplyr` inaugurou uma nova sintaxe em R (ver a postagem [O que √© o Tidyverse](https://www.ricardoperdiz.com/blog/2020-04-tidyverse/) para mais informa√ß√µes), que permite a manipula√ß√£o de dados tabulares de maneira mais pr√°tica e com mais clareza ao usu√°rio.  

O `ggplot2` [@Wickham2016] √© a ferramenta de visualiza√ß√£o mais popular em R e ser√° utilizada neste minicurso.
Ele segue uma "gram√°tica de gr√°ficos", em que voc√™ constr√≥i o gr√°fico em camadas.  

Por sua vez, o pacote `palmerpenguins` [@Horstetal2020] oferece um conjunto de dados referente √† morfologia de tr√™s esp√©cies de pinguins que ocorrem no [arquip√©lago de Palmer](https://en.wikipedia.org/wiki/Palmer_Archipelagono noroeste da [pen√≠nsula Ant√°rtica](https://pt.wikipedia.org/wiki/Pen%C3%ADnsula_Ant%C3%A1rtica).  


```{r}
#| eval: false
install.packages(c("dplyr", "palmerpenguins", "ggplot2"))
```

Agora carregaremos o pacote por meio da fun√ß√£o `library()`.
Devemos inserir o nome do pacote que queremos carregar entre os par√™nteses, com ou sem aspas.  

```{r}
#| eval: false
library("dplyr")
library("palmerpenguins")
library("ggplot2")
```

------------------------------------------------------------------------

## üß≥ Importando dados üé≤

<!-- Importa√ß√£o ‚Üí 15 min -->

Para a an√°lise de dados, precisamos carregar __dados__ üòÑüòÑüòÑ.
Existem diversas maneiras de importar dados ao R.
Importaremos um arquivo CSV referente ao pacote R `palmerpenguins` [@Horstetal2020].  

```{webr}
pinguins <- 
  read.table("penguins.csv", sep = "\t", dec = ".", header = TRUE)
pinguins
```

Quando executamos os dados lidos pela fun√ß√£o `read.table()`, podemos acabar vendo muita coisa, o que pode acabar incomodando.
Desta forma, pode-se utilizar a fun√ß√£o `head()` para ver apenas as primeiras seis linhas da tabela.  


```{r}
#| include: false
#| eval: false
pinguins <- read.table(
  "penguins.csv",
  sep = "\t",
  dec = ".",
  header = TRUE
)
head(pinguins)
```


::: {.callout-tip}
### Diferen√ßa entre `read.csv()` e `read.table()`

O R possui diferentes fun√ß√µes para ler tabelas:

+ `read.csv()` √© uma forma simplificada de read.table() j√° configurada para ler arquivos separados por v√≠rgula (,) e com ponto (.) como separador decimal.

+ `read.table()` √© mais flex√≠vel, permitindo ajustar separador (`sep`) e s√≠mbolo decimal (`dec`).  
:::


### Inspe√ß√£o b√°sica - `head()`, `tail()`, `str()`, `summary()` e `glimpse()` {#sec-inspecaobasica}

<!-- inspe√ß√£o de dados ‚Üí 25 min -->

Agora que os dados foram lidos, vamos inspecion√°-los.
Para ver as primeiras linhas/valores de um objeto, utilizamos a fun√ß√£o `head()`:

```{webr}
# Inspecionando os dados
head(pinguins)   # Primeiras 6 linhas
```

Para observar os √∫ltimos valores, utilizamos a fun√ß√£o `tail()`:

```{webr}
tail(pinguins)   # √öltimas 6 linhas
```

Podemos utilizar a fun√ß√£o `dplyr::glimpse()` para ver a estrutura dos dados:

```{webr}
glimpse(pinguins) # Uma vis√£o geral dos dados
```

Al√©m de `dplyr::glimpse()`, duas fun√ß√µes muito √∫teis para inspecionar dados s√£o:

+ `str()`: mostra a estrutura do objeto.

+ `summary():` gera um resumo estat√≠stico das vari√°veis num√©ricas e uma contagem das categorias.  

```{webr}
str(pinguins)
summary(pinguins)
```


------------------------------------------------------------------------

## üßπ Limpeza e checagem de dados üëÄ

Dados do mundo real raramente s√£o perfeitos.
Precisamos limp√°-los.  

+ **Dados ausentes (NA):** Verificando e lidando com valores `NA`.  

+ **Tipos de colunas:** Garantindo que cada coluna tenha o tipo de dado correto (num√©rico, texto, etc.).  

### Dados ausentes

```{webr}
# Identificando valores ausentes
sum(is.na(pinguins))
```

### Removendo linhas com NA

Para remover todas as linhas que apresentarem valoes ausentes, podemos utilizar a fun√ß√£o `na.omit()`.  

```{webr}
dados_sem_na <- na.omit(pinguins)
```

Agora checamos os dados ap√≥s a remo√ß√£o das linhas com dados ausentes:

```{webr}
glimpse(dados_sem_na)
```

### Renomear colunas

Podemos renomear colunas utilizando a fun√ß√£o `dplyr::rename()`:

```{webr}
# Renomeando colunas para nomes em portugues
pinguins_renomeados <- 
  rename(
    pinguins,
    barbatana_comprimento_mm = flipper_length_mm,
    massa_corporal_g = body_mass_g
  )
```

Veja agora o resultado da renomea√ß√£o das colunas:

```{webr}
glimpse(pinguins_renomeados)
```

### Transforma√ß√£o de tipos de dados/colunas

√Äs vezes, uma coluna que deveria ser num√©rica (por exemplo, com n√∫meros) √© lida como um texto.
Isso pode acontecer quando a coluna tem algum valor n√£o num√©rico, como um caractere especial ou um espa√ßo.  

Para resolver, podemos converter o tipo de dado.
Por exemplo, vamos transformar a coluna `body_mass_g` para o tipo num√©rico usando a fun√ß√£o `as.numeric()`:

```{webr}
# Transformando uma coluna para num√©rica
pinguins$body_mass_g <- as.numeric(pinguins$body_mass_g)
glimpse(pinguins) # Agora veja que a coluna est√° como 'num√©rica'
```

::: {.callout-tip}
### Ajuda para entender quais s√£o os argumentos de uma fun√ß√£o

O R possui uma fun√ß√£o, chamada ajuda "*help*", que deve ser utilizada para obtermos informa√ß√£o sobre o que uma fun√ß√£o executa.
Para obter essa ajuda, devemos pegar a fun√ß√£o e execut√°-la da seguinte forma:

```{r}
#| eval: false
#| echo: true
?read.table
?na.omit
?c
```

Ao utilizar o `?` junto ao nome de uma fun√ß√£o, sem os par√™nteses, uma janela se abre contendo v√°rias informa√ß√µes √∫teis referentes ao que aquela determinada fun√ß√£o faz. Teste a√≠!
:::

## Pr√°tica I: o b√°sico na ponta dos dedos

Explore agora as li√ß√µes dadas at√© ent√£o.  

```{webr}
pinguins
```

Agora √© sua vez: crie um vetor chamado `idades` contendo os valores 20, 25, 30, 35.
Some 10 a cada idade e verifique o resultado.

```{webr}
# Coloque aqui seu codigo
```

------------------------------------------------------------------------

## üõ†Ô∏è Manipula√ß√£o e transforma√ß√£o de dados ü™õ

<!-- Limpeza e transforma√ß√£o (dplyr) ‚Üí 40 min -->

### Utiliza√ß√£o do  *pipe* `|>`

O [R desde a vers√£o 4.1.0 permite a utiliza√ß√£o do operador `|>`](https://ivelasq.rbind.io/blog/understanding-the-r-pipe/), popularmente chamado de *pipe* (cano, em tradu√ß√£o literal), que permite o encadeamento de a√ß√µes na linguagem.
Isso serve apenas para facilitar a leitura do c√≥digo.
Assim lemos o c√≥digo da esquerda para a direita.  

Por exemplo, usando os exemplos anteriores, poder√≠amos fazer uso do *pipe* da seguinte maneira:

```{webr}
pinguins |> 
  head()
```

```{webr}
pinguins |> 
  tail()
```

```{webr}
pinguins |> 
  glimpse()
```

**Reparem que o resultado √© o mesmo apresentado na @sec-inspecaobasica.**  

O verdadeiro poder do *pipe* `|>`  aparece quando encadeamos m√∫ltiplas opera√ß√µes em sequ√™ncia.
Isso nos permite realizar uma an√°lise completa em poucas linhas de c√≥digo, mantendo a l√≥gica clara.  

#### Exemplo

Vamos filtrar os pinguins da esp√©cie `Adelie`, selecionar a coluna de massa corporal, remover os valores ausentes e, por fim, calcular a m√©dia

Veja como o |> torna essa sequ√™ncia de passos f√°cil de ler:


```{webr}
pinguins |>
  filter(species == "Adelie") |> 
  select(body_mass_g) |> 
  na.omit() |> 
  summarise(media_massa = mean(body_mass_g))
```


::: {.callout-tip}
## `|>` funciona como um cano!

Pense no `|>` como um cano que 'passa' o resultado do comando anterior para a pr√≥xima fun√ß√£o.
Isso nos permite ler o c√≥digo da esquerda para a direita, como uma sequ√™ncia de passos.
:::

Sem o *pipe*, o mesmo processo seria mais complexo e dif√≠cil de ler, pois uma fun√ß√£o ficaria aninhada dentro da outra:

```{webr}
summarise(
  na.omit(
    select(
      filter(pinguins, species == "Adelie"), 
      body_mass_g)
    ), 
  media_massa = mean(body_mass_g))
```

O `|>` transforma essa sintaxe confusa em uma sequ√™ncia l√≥gica de comandos.  

### Pacote `dplyr`

+ `select()`: Escolhe colunas.
+ `filter()`: Filtra linhas.
+ `mutate()`: Cria novas colunas ou altera existentes.
+ `group_by()` e `summarize()`: Agrupa dados para fazer resumos.  

Filtrando pinguins com barbatanas maiores que 200 mm:

```{webr}
pinguins_maior_que_200 <-
  pinguins |>
  filter(flipper_length_mm > 200)
pinguins_maior_que_200
```

### üß† Microdesafio

Filtre apenas os pinguins da ilha `Dream`:

```{webr}
#Insira o codigo aqui
```


### Sele√ß√£o de colunas - `dplyr::select()`

Podemos selecionar colunas com a fun√ß√£o `select()`:

```{webr}
pinguins |>
  select(flipper_length_mm, body_mass_g)
```

### Cria√ß√£o de novas colunas - `dplyr::mutate()`

Para criar novas colunas, usamos a fun√ß√£o `mutate()`.

```{webr}
dados_com_nova_coluna <- 
  pinguins |>
  mutate(
    diferenca = 
  ))
```

Podemos fazer isso baseados em condi√ß√µes. Por exemplo, a fun√ß√£o `case_when()` √© √≥tima para aplicar v√°rias regras, enquanto o `ifelse()` √© mais simples e ideal para regras de 'se isso, ent√£o aquilo'.  

```{webr}
pinguins |>
  mutate(barbatana_grande = case_when(
    flipper_length_mm > 200 ~ "Grande",
    flipper_length_mm < 200 ~ "Pequena",
    .default = "Sem dados"
  ))
```

```{webr}
pinguins |>
  mutate(
    especie_Adelia = ifelse(species == "Adelia", TRUE, FALSE)
      )
```

### Agrupamento e sumariza√ß√£o de dados - `group_by()` e `summarise()`

Podemos agrupar os dados por qualquer vari√°vel e fazer sum√°rios estat√≠sticos, √∫teis na an√°lise explorat√≥ria de dados.
Para agrupar os dados, utilizamos a fun√ß√£o `group_by()`; e para sumarizar, utilizamos a fun√ß√£o `summarise()`.  

```{webr}
pinguins |>
  group_by(species) |>
  summarise(
    media_barbatana_mm = mean(flipper_length_mm, na.rm = TRUE),
    n_individuos = n()
  )
```

A fun√ß√£o `summarise()` √© incrivelmente poderosa para resumir seus dados.
Al√©m de calcular a m√©dia (`mean()`), podemos usar v√°rias outras fun√ß√µes estat√≠sticas para obter uma vis√£o mais completa de cada grupo.  

Imagine que queremos entender n√£o apenas a m√©dia, mas tamb√©m a variabilidade dos dados.
Podemos calcular o desvio padr√£o (`sd()`), o valor m√≠nimo (`min()`) e o m√°ximo (`max()`) do comprimento da barbatana por esp√©cie.  


```{webr}
pinguins |>
  group_by(species) |>
  summarise(
    media_barbatana_mm = mean(flipper_length_mm, na.rm = TRUE),
    desvio_padrao_mm = sd(flipper_length_mm, na.rm = TRUE),
    min_barbatana_mm = min(flipper_length_mm, na.rm = TRUE),
    max_barbatana_mm = max(flipper_length_mm, na.rm = TRUE),
    n_individuos = n()
  )
```

::: {.callout-tip}
## `na.rm = TRUE`

O `na.rm = TRUE` que voc√™ v√™ dentro das fun√ß√µes `mean()`, `sd()`, `min()` e `max()` significa 'remova os valores NA (valores ausentes) antes de fazer o c√°lculo'. Isso evita erros e garante que a fun√ß√£o opere apenas com os dados dispon√≠veis.  

:::


### Simplificando contagens com `count()`

A fun√ß√£o `count()` do pacote `dplyr` √© a maneira mais simples e direta de realizar contagens por grupos.
√â uma ferramenta essencial na an√°lise explorat√≥ria.  

Enquanto `summarise()` pode ser usado para contar, a fun√ß√£o `count()` foi feita para essa tarefa, tornando o c√≥digo mais simples e intuitivo.
Ela automaticamente agrupa os dados e conta a frequ√™ncia de cada categoria.

Por exemplo, se quisermos saber a quantidade de pinguins de cada esp√©cie em cada ilha, basta usar `count()` e especificar as colunas:

```{webr}
pinguins |> 
  count(species, island)
```

√â uma maneira r√°pida e elegante de resumir a distribui√ß√£o dos dados categ√≥ricos.  

## Pr√°tica II: manipulando dados üíæ

Explore agora o que fizemos at√© o momento: selecionar colunas, renomear algumas, criar novas colunas:

```{webr}
pinguins |> select(species, island)
pinguins |> select(especie = species, ilha = island)
pinguins |> filter(species == "Adelia")
```

------------------------------------------------------------------------

## üìà Visualiza√ß√£o de dados üìä

<!-- Visualiza√ß√£o (ggplot2) ‚Üí 40 min -->

O pacote `ggplot2` [@Wickham2016] uma "gram√°tica de gr√°ficos", em que voc√™ constr√≥i o gr√°fico em camadas.
As fun√ß√µes b√°sicas do pacote, nesta ordem, s√£o:

+ `ggplot()`: Define os dados e a est√©tica (`aes()`).  

+ `geom_*`: Adiciona as camadas geom√©tricas (pontos: `geom_point()`; barras: `geom_col()`; linhas: `geom_line()`).

Fa√ßamos um histograma do comprimento do bico dos pinguins:

```{webr}
ggplot(pinguins, aes(x = bill_length_mm)) +
  geom_histogram(binwidth = 5, fill = "skyblue", color = "black") +
  labs(title = "Distribui√ß√£o do comprimento de bico de pinguins do arquip√©lago Palmer", x = "Comprimento de bico (mm)", y = "Frequ√™ncia")
```

### Visualizando rela√ß√µes entre vari√°veis

Gr√°fico de dispers√£o entre comprimento de barbatana (`flipper_length_mm`) e massa corporal (`body_mass_g`)

```{webr}
pinguins |> 
  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point(color = "darkblue", alpha = 0.6) +
  labs(title = "Comprimento de barbatana e massa corporal de pinguins do arquip√©lago Palmer", x = "Comprimento de barbatana", y = "Massa corporal")# + geom_smooth(method = "lm", se = FALSE, color = "red")
```

------------------------------------------------------------------------

### Explorando rela√ß√µes complexas

Podemos adicionar mais vari√°veis aos nossos gr√°ficos usando a est√©tica.

+ `color`: Mapeia uma vari√°vel categ√≥rica para a cor.  

+ `facet_wrap()` e `facet_grid()`: Cria sub-gr√°ficos para cada categoria.  

```{webr}
pinguins |> 
  ggplot(aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
  geom_point() +
  labs(title = "Comprimento de barbatana e massa corporal por esp√©cie de pinguim ocorrentes no arquip√©lago Palmer", x = "Comprimento de barbatana", y = "Massa corporal")# + geom_smooth(method = "lm", se = FALSE, color = "red")
```

### Gr√°ficos de facetas

As facetas facilitam a visualiza√ß√£o de dados por grupos.
H√° duas fun√ß√µes que produzem as facetas:

+ `facet_wrap()`, quando voc√™ quer visualizar dados por apenas uma vari√°vel;  

+ `facet_grid()`, que deve ser utilizada quando voc√™ quer ver a combina√ß√£o entre duas vari√°veis.  


```{webr}
ggplot(pinguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point() +
  facet_wrap(~species) +
  labs(
    title = "Comprimento de barbatana e massa corporal\npor esp√©cie de pinguim ocorrentes no arquip√©lago Palmer",
    x = "Comprimento de barbatana (mm)",
    y = "Massa corporal (g)")
```


```{webr}
ggplot(pinguins, aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point() +
  facet_grid(species ~ island) +
  labs(
    title = "Comprimento de barbatana e massa corporal\npor esp√©cie de pinguim e ilha ocorrentes no arquip√©lago Palmer",
    x = "Comprimento de barbatana (mm)",
    y = "Massa corporal (g)")
```

### Gr√°fico de barras com `geom_col()`

Al√©m de histogramas e dispers√µes, gr√°ficos de barras s√£o muito √∫teis:

```{webr}
pinguins |> 
  count(species) |> 
  ggplot(aes(x = species, y = n, fill = species)) +
  geom_col() +
  labs(title = "N√∫mero de pinguins por esp√©cie")
```

## Pr√°tica III: visualizando rela√ß√µes

Agora √© a sua vez de testar.
Use o espa√ßo abaixo para selecionar v√°riaveis e plotar.
Se voc√™ n√£o lembrar do nome das vari√°veis, use as fun√ß√µes `str()` ou `dplyr::glimpse()` para relembrar, checando assim a estrutura dos dados.  

```{webr}
pinguins |> 
  ggplot(aes(x = flipper_length_mm, y = body_mass_g)) +
  geom_point() +
  labs(title = "Vari√°vel X vs. Vari√°vel Y", x = "Qual vari√°vel?", y = "Qual vari√°vel?")
```


## üß† Desafio rel√¢mpago üå©Ô∏è

<!-- Desafios e conclus√£o ‚Üí 25 min -->

> Filtre apenas os pinguins da esp√©cie `Adelie` e fa√ßa um gr√°fico de dispers√£o entre `flipper_length_mm` e `body_mass_g`. Use cores diferentes para cada ilha.  


```{webr}
# Inclua seu codigo aqui
```

## Conclus√£o e pr√≥ximos passos

Parab√©ns!
Voc√™ concluiu este minicurso introdut√≥rio.
Vimos (quase) o ciclo completo da an√°lise de dados: importa√ß√£o, limpeza, transforma√ß√£o e visualiza√ß√£o.  

**Onde seguir a partir daqui?**

+ **Aprofundar-se na linguagem R:** Buscar dominar a linguagem. H√° muita literatura dispon√≠vel [@VicentiniPerdiz2021].  

+ **Modelagem Estat√≠stica:** Aprenda a construir modelos de regress√£o, etc.  

+ **_Machine Learning_:** Mergulhe em algoritmos de previs√£o. 

+ **Comunica√ß√£o:** Aprenda a criar _dashboards_ interativos com pacotes como o **Shiny**.  

## Exerc√≠cio pr√°tico

Tente aplicar o que aprendeu em um novo conjunto de dados.  

```{webr}
# Carregue um novo conjunto de dados
# dados_projeto <- read.table("caminho/para/seu/arquivo.csv")

# Fa√ßa uma an√°lise explorat√≥ria...
# Limpe e transforme os dados...
# Crie visualiza√ß√µes para contar uma hist√≥ria...
```

## Refer√™ncias citadas

::: {#refs}
:::

